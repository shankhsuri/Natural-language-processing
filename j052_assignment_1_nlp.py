# -*- coding: utf-8 -*-
"""J052_Assignment_1_NLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECbFvGdJLlJrPpqoXuTk6Dc-9hyUIPuQ
"""

import nltk
nltk.download()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from string import punctuation #Remove puntuationpunctuation 
from nltk.corpus import stopwords #Remove stop words
from nltk.tokenize import word_tokenize 
from nltk.stem import LancasterStemmer
from nltk.tag import pos_tag

data=pd.read_csv("/spam (1).csv",encoding='latin-1')

data=data.drop(['Unnamed: 2'	,'Unnamed: 3','Unnamed: 4'],axis=1)
data.columns = ['label', 'content']

from string import punctuation
from nltk.corpus import stopwords
stuff_to_be_removed = list(stopwords.words('english'))+list(punctuation)
from nltk.tokenize import word_tokenize
#from nltk.stem import LancasterStemmer
#stemmer = LancasterStemmer()
from nltk.stem import WordNetLemmatizer
lemmatizer = WordNetLemmatizer()
lemmatizer = WordNetLemmatizer()
corpus = data['content'].tolist()
len(corpus)

final_corpus = []
for i in range(len(corpus)):
  word = word_tokenize(corpus[i].lower())
  word = [lemmatizer.lemmatize(y) for y in word if y not in stuff_to_be_removed]
  j = " ".join(word)
  final_corpus.append(j)

final_corpus

label_list=data['label'].tolist()
df = pd.DataFrame(final_corpus)
df['label'] = label_list
df.columns=['content','label']

df

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf = TfidfVectorizer()
vector = tfidf.fit_transform(df['content'])
x_train = vector.toarray()
y_train= df['label']

from sklearn.naive_bayes import MultinomialNB
ab = MultinomialNB()
ab.fit(x_train,y_train)
ypred = ab.predict(x_train)

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
print(accuracy_score(y_train,ypred))
print(confusion_matrix(y_train,ypred))
print(classification_report(y_train,ypred))

from sklearn.naive_bayes import GaussianNB
ab = GaussianNB()
ab.fit(x_train,y_train)
ypred = ab.predict(x_train)

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
print(accuracy_score(y_train,ypred))
print(confusion_matrix(y_train,ypred))
print(classification_report(y_train,ypred))

from xgboost import XGBClassifier
model = XGBClassifier(max_depth=10,random_state=1,learning_rate=0.05,seed=1)
model.fit(x_train, y_train)
y_pred=model.predict(x_train)

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
print(accuracy_score(y_train,ypred))
print(confusion_matrix(y_train,ypred))
print(classification_report(y_train,ypred))